module Main where

import Day01 (day01)
import Day02 (day02)
import Day03 (day03)
import Day04 (day04)
import Day05 (day05)
import Day06 (day06)
import Day07 (day07)
import Day08 (day08)
import Day09 (day09)
import Day10 (day10)
import Day11 (day11)
import Day12 (day12)
import Day13 (day13)
import Day14 (day14)
import Day15 (day15)
import Day16 (day16)
import Day17 (day17)
import Day18 (day18)
import Day19 (day19)
import Day20 (day20)
import Day21 (day21)
import Day22 (day22)
import Day23 (day23)
import Day24 (day24)
import Day25 (day25)
import Solution (Input (..), executeSolution)
import System.Environment (getArgs)

main :: IO ()
main = do
  day <- head <$> getArgs
  case day of
    "01" -> executeSolution day01 (FileInput "day01.txt")
    "02" -> executeSolution day02 (FileInput "day02.txt")
    "03" -> executeSolution day03 (FileInput "day03.txt")
    "04" -> executeSolution day04 (FileInput "day04.txt")
    "05" -> executeSolution day05 (FileInput "day05.txt")
    "06" -> executeSolution day06 (FileInput "day06.txt")
    "07" -> executeSolution day07 (FileInput "day07.txt")
    "08" -> executeSolution day08 (FileInput "day08.txt")
    "09" -> executeSolution day09 (FileInput "day09.txt")
    "10" -> executeSolution day10 (FileInput "day10.txt")
    "11" -> executeSolution day11 (FileInput "day11.txt")
    "12" -> executeSolution day12 (FileInput "day12.txt")
    "13" -> executeSolution day13 (FileInput "day13.txt")
    "14" -> executeSolution day14 (FileInput "day14.txt")
    "15" -> executeSolution day15 (FileInput "day15.txt")
    "16" -> executeSolution day16 (FileInput "day16.txt")
    "17" -> executeSolution day17 (FileInput "day17.txt")
    "18" -> executeSolution day18 (FileInput "day18.txt")
    "19" -> executeSolution day19 (FileInput "day19.txt")
    "20" -> executeSolution day20 (FileInput "day20.txt")
    "21" -> executeSolution day21 (FileInput "day21.txt")
    "22" -> executeSolution day22 (FileInput "day22.txt")
    "23" -> executeSolution day23 (FileInput "day23.txt")
    "24" -> executeSolution day24 (FileInput "day24.txt")
    "25" -> executeSolution day25 (FileInput "day25.txt")
    _ -> error $ "Invalid day: " ++ day
